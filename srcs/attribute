automatic.c:	if (!ft_strcmp(parser->attribute, "sphere_torus"))
automatic.c:	else if (!ft_strcmp(parser->attribute, "adn"))
automatic.c:	printf("%s !!!!!!!\n", parser->attribute);
ft_parse_obj_faces.c:	ft_lstpushback(&(parser->faces_tmp), ft_lstnew(&face, sizeof(t_ivec3)));
ft_parse_obj_faces.c:	parser->nb_faces++;
ft_parse_obj_faces.c:		ft_lstpushback(&(parser->faces_tmp), ft_lstnew(&face, sizeof(t_ivec3)));
ft_parse_obj_faces.c:		parser->nb_faces++;
ft_parse_obj_vertices.c:	ft_lstpushback(&(parser->vertices_tmp), ft_lstnew_ptr(vertex, sizeof(t_point3d)));
ft_parse_obj_vertices.c:	parser->nb_vertices++;
ft_process_parse_obj.c:	ptr = parser->vertices_tmp;
ft_process_parse_obj.c:	parser->vertices = (t_point3d *)(malloc(sizeof(t_point3d) * parser->nb_vertices + 1));
ft_process_parse_obj.c:	while (i <= parser->nb_vertices)
ft_process_parse_obj.c:		parser->vertices[i] = *(t_point3d *)(ptr->content);
ft_process_parse_obj.c:	ptr = parser->faces_tmp;
ft_process_parse_obj.c:	parser->faces = (t_ivec3 *)(malloc(sizeof(t_ivec3) * parser->nb_faces));
ft_process_parse_obj.c:	while (i < parser->nb_faces)
ft_process_parse_obj.c:		parser->faces[i] = *(t_ivec3 *)(ptr->content);
ft_process_parse_obj.c:	if (!(parser->draw_array = (double *)(malloc(sizeof(double) * 9 * parser->nb_faces))))
ft_process_parse_obj.c://	printf("%d\n", parser->nb_faces);
ft_process_parse_obj.c:	while (nb_faces < parser->nb_faces)
ft_process_parse_obj.c:		parser->draw_array[9 * nb_faces] = parser->vertices[parser->faces[nb_faces].x].x;
ft_process_parse_obj.c:		parser->draw_array[9 * nb_faces + 1] = parser->vertices[parser->faces[nb_faces].x].y;
ft_process_parse_obj.c:		parser->draw_array[9 * nb_faces + 2] = parser->vertices[parser->faces[nb_faces].x].z;
ft_process_parse_obj.c:		parser->draw_array[9 * nb_faces + 3] = parser->vertices[parser->faces[nb_faces].y].x;
ft_process_parse_obj.c:		parser->draw_array[9 * nb_faces + 4] = parser->vertices[parser->faces[nb_faces].y].y;
ft_process_parse_obj.c:		parser->draw_array[9 * nb_faces + 5] = parser->vertices[parser->faces[nb_faces].y].z;
ft_process_parse_obj.c:		parser->draw_array[9 * nb_faces + 6] = parser->vertices[parser->faces[nb_faces].z].x;
ft_process_parse_obj.c:		parser->draw_array[9 * nb_faces + 7] = parser->vertices[parser->faces[nb_faces].z].y;
ft_process_parse_obj.c:		parser->draw_array[9 * nb_faces + 8] = parser->vertices[parser->faces[nb_faces].z].z;
parse_cut.c:	if (!ft_strcmp(parser->attribute, "relative"))
parse_cut.c:	else if (!ft_strcmp(parser->attribute, "absolute"))
parse_cut.c:	else if (!ft_strcmp(parser->attribute, "circular"))
parse_cut.c:		ft_dprintf(2, "line %d: attribute %s unknown\n", parser->nb_lines,
parse_cut.c:				parser->attribute);
parse_cut.c:	if (parser->parse_enum == e_parse_cut)
parse_cut.c:				parser->nb_lines);
parse_cut.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_cut.c:				parser->nb_lines, desc);
parse_cut.c:	if (parser->parse_enum == e_parse_cut)
parse_cut.c:				parser->nb_lines);
parse_cut.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_cut.c:	if (parser->parse_enum == e_parse_cut)
parse_cut.c:				parser->nb_lines);
parse_cut.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_main.c:	parser->nb_lines = 0;
parse_main.c:	parser->tag_stack = NULL;
parse_main.c:	parser->attribute = NULL;
parse_main.c:	parser->tag = NULL;
parse_main.c:	parser->parse_enum = e_parse_scene;
parse_main.c:	parser->got_scene = 0;
parse_main.c:	if (parser->attribute != NULL)
parse_main.c:		free(parser->attribute);
parse_main.c:	if (parser->tag != NULL)
parse_main.c:		free(parser->tag);
parse_main.c:	ptr = &(parser->tag_stack);
parse_obj.c:	if (parser->parse_enum == e_parse_cobject &&
parse_obj.c:			!ft_strcmp(parser->attribute, "obj"))
parse_obj.c:				parser->nb_lines, parser->tag);
parse_obj.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_orsc.c:	if (parser->parse_enum == e_parse_camera)
parse_orsc.c:	else if (parser->parse_enum == e_parse_object)
parse_orsc.c:	else if (parser->parse_enum == e_parse_cobject)
parse_orsc.c:	else if (parser->parse_enum == e_parse_light)
parse_orsc.c:				parser->nb_lines);
parse_orsc.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_orsc.c:	if (parser->parse_enum == e_parse_camera)
parse_orsc.c:	else if (parser->parse_enum == e_parse_object)
parse_orsc.c:	else if (parser->parse_enum == e_parse_cobject)
parse_orsc.c:	else if (parser->parse_enum == e_parse_light)
parse_orsc.c:				parser->nb_lines);
parse_orsc.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_orsc.c:	if (parser->parse_enum == e_parse_object)
parse_orsc.c:	else if (parser->parse_enum == e_parse_cobject)
parse_orsc.c:				parser->nb_lines);
parse_orsc.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_orsc.c:	if (parser->parse_enum == e_parse_object)
parse_orsc.c:	else if (parser->parse_enum == e_parse_cobject)
parse_orsc.c:	else if (parser->parse_enum == e_parse_light)
parse_orsc.c:	else if (parser->parse_enum == e_parse_ambient)
parse_orsc.c:	else if (parser->parse_enum == e_parse_fog)
parse_orsc.c:				parser->nb_lines);
parse_orsc.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_orsc.c:	if (parser->parse_enum == e_parse_object)
parse_orsc.c:	else if (parser->parse_enum == e_parse_cobject)
parse_orsc.c:				parser->nb_lines);
parse_orsc.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_others.c:	if (parser->parse_enum == e_parse_object)
parse_others.c:	else if (parser->parse_enum == e_parse_cobject)
parse_others.c:				parser->nb_lines);
parse_others.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_others.c:	if (parser->parse_enum == e_parse_object)
parse_others.c:	else if (parser->parse_enum == e_parse_cobject)
parse_others.c:				parser->nb_lines);
parse_others.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_others.c:	if (parser->parse_enum == e_parse_object)
parse_others.c:	else if (parser->parse_enum == e_parse_cobject)
parse_others.c:				parser->nb_lines);
parse_others.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_others.c:	if (parser->parse_enum == e_parse_object)
parse_others.c:	else if (parser->parse_enum == e_parse_cobject)
parse_others.c:				parser->nb_lines);
parse_others.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_others.c:	if (parser->parse_enum == e_parse_light)
parse_others.c:	else if (parser->parse_enum == e_parse_ambient)
parse_others.c:	else if (parser->parse_enum == e_parse_fog)
parse_others.c:				parser->nb_lines);
parse_others.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_perts.c:	if (!ft_strcmp(parser->attribute, "waves"))
parse_perts.c:	else if (!ft_strcmp(parser->attribute, "ripple"))
parse_perts.c:	else if (!ft_strcmp(parser->attribute, "noise"))
parse_perts.c:	else if (!ft_strcmp(parser->attribute, "chess"))
parse_perts.c:	else if (!ft_strcmp(parser->attribute, "spiral"))
parse_process.c:	if (!ft_strcmp(parser->tag, "resolution"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "perturbation"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "fast_resolution"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "ellipsoidABC"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "big_radius"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "small_radius"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "goursatAB"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "cut"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "cutXYZ"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "inequality"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "value"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "vertexA"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "vertexB"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "vertexC"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "nb_spheres"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "spheres_radius"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "length"))
parse_process.c:	else if (strcmp(parser->tag, "scene") &&
parse_process.c:			strcmp(parser->tag, "objlist") &&
parse_process.c:			strcmp(parser->tag, "lightlist"))
parse_process.c:		ft_dprintf(2, "line %d: unknown tag <%s>\n", parser->nb_lines,
parse_process.c:				parser->tag);
parse_process.c:	if (!ft_strcmp(parser->tag, "src"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "color"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "refraction"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "reflection"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "transparency"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "shine"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "intensity"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "shader"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "filter"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "negative"))
parse_process.c:	if (!ft_strcmp(parser->tag, "positionXYZ"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "rotationXYZ"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "scaleXYZ"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "camera"))
parse_process.c:		parser->parse_enum = e_parse_camera;
parse_process.c:	else if (!ft_strcmp(parser->tag, "object"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "cobject"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "ambientlight"))
parse_process.c:		parser->parse_enum = e_parse_ambient;
parse_process.c:	else if (!ft_strcmp(parser->tag, "fog"))
parse_process.c:		parser->parse_enum = e_parse_fog;
parse_process.c:	else if (!ft_strcmp(parser->tag, "light"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "radius"))
parse_process.c:	else if (!ft_strcmp(parser->tag, "angle"))
parse_process.c:	if (parser->op == STACK)
parse_process.c:	else if (parser->op == POP)
parse_process.c:		if (!ft_strcmp(parser->tag, "cut"))
parse_process.c:			parser->parse_enum = e_parse_object;
parse_process.c:		else if (!ft_strcmp(parser->tag, "object"))
parse_process.c:			parser->parse_enum = e_parse_cobject;
parse_process.c:			if (parser->parse_enum == e_parse_cobject && 
parse_process.c:					parser->attribute != NULL)
parse_process.c:			parser->parse_enum = e_parse_scene;
parse_process.c:		if (parser->attribute != NULL)
parse_process.c:			ft_strdel(&(parser->attribute));
parse_process.c:		ft_dprintf(2, "line %d: not xml format\n", parser->nb_lines);
parse_process.c:	parser->nb_lines++;
parse_process.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_settings.c:	if (parser->parse_enum != e_parse_scene)
parse_settings.c:				parser->nb_lines);
parse_settings.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_settings.c:	if (parser->parse_enum != e_parse_scene)
parse_settings.c:				parser->nb_lines);
parse_settings.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_settings.c:	if (parser->parse_enum != e_parse_scene)
parse_settings.c:				parser->nb_lines);
parse_settings.c:	printf("attribute: %s| %i\n",parser->attribute, e_sharpen);fflush(stdout);
parse_settings.c:	if (!ft_strcmp(parser->attribute, "blur"))
parse_settings.c:	else if (!ft_strcmp(parser->attribute, "sharpen"))
parse_settings.c:	else if (!ft_strcmp(parser->attribute, "sobel"))
parse_settings.c:	else if (!ft_strcmp(parser->attribute, "emboss"))
parse_settings.c:	else if (!ft_strcmp(parser->attribute, "grey"))
parse_settings.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_settings.c:	if (parser->parse_enum != e_parse_scene)
parse_settings.c:				parser->nb_lines);
parse_settings.c:	if (!ft_strcmp(parser->attribute, "normal"))
parse_settings.c:	else if (!ft_strcmp(parser->attribute, "cartoon"))
parse_settings.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_specifics.c:	if (!ft_strcmp(parser->attribute, "sphere"))
parse_specifics.c:	else if (!ft_strcmp(parser->attribute, "cone"))
parse_specifics.c:	else if (!ft_strcmp(parser->attribute, "cylinder"))
parse_specifics.c:	else if (!ft_strcmp(parser->attribute, "plane"))
parse_specifics.c:	else if (!ft_strcmp(parser->attribute, "ellipsoid"))
parse_specifics.c:	else if (!ft_strcmp(parser->attribute, "torus"))
parse_specifics.c:	else if (!ft_strcmp(parser->attribute, "goursat"))
parse_specifics.c:	else if (!ft_strcmp(parser->attribute, "lemniscate"))
parse_specifics.c:	else if (!ft_strcmp(parser->attribute, "roman"))
parse_specifics.c:	else if (!ft_strcmp(parser->attribute, "piriform"))
parse_specifics.c:	else if (!ft_strcmp(parser->attribute, "triangle"))
parse_specifics.c:	else if (!ft_strcmp(parser->attribute, "paraboloid"))
parse_specifics.c:	else if (!ft_strcmp(parser->attribute, "hyperboloid"))
parse_specifics.c:	else if (!ft_strcmp(parser->attribute, "mobius"))
parse_specifics.c:		ft_dprintf(2, "line %d: attribute %s unknown\n", parser->nb_lines,
parse_specifics.c:				parser->attribute);
parse_specifics.c:	if (parser->parse_enum == e_parse_object &&
parse_specifics.c:			!ft_strcmp("cone", parser->attribute))
parse_specifics.c:	else if (parser->parse_enum == e_parse_light)
parse_specifics.c:				parser->nb_lines);
parse_specifics.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_specifics.c:	if (parser->parse_enum == e_parse_object &&
parse_specifics.c:			!ft_strcmp("sphere", parser->attribute))
parse_specifics.c:	else if (parser->parse_enum == e_parse_object &&
parse_specifics.c:			!ft_strcmp("cylinder", parser->attribute))
parse_specifics.c:	else if (parser->parse_enum == e_parse_object &&
parse_specifics.c:			!ft_strcmp("ellipsoid", parser->attribute))
parse_specifics.c:	else if (parser->parse_enum == e_parse_object &&
parse_specifics.c:			!ft_strcmp("hyperboloid", parser->attribute))
parse_specifics.c:	else if (parser->parse_enum == e_parse_cobject &&
parse_specifics.c:			!ft_strcmp("sphere_torus", parser->attribute))
parse_specifics.c:				parser->nb_lines);
parse_specifics.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_specifics2.c:	name = parser->attribute;
parse_specifics2.c:	if (parser->parse_enum == e_parse_object)
parse_specifics2.c:	else if (parser->parse_enum == e_parse_cobject)
parse_specifics2.c:				parser->nb_lines);
parse_specifics2.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_specifics2.c:	if (parser->parse_enum == e_parse_object &&
parse_specifics2.c:			!ft_strcmp("ellipsoid", parser->attribute))
parse_specifics2.c:				parser->nb_lines);
parse_specifics2.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_specifics2.c:	if (parser->parse_enum == e_parse_object &&
parse_specifics2.c:			!ft_strcmp("torus", parser->attribute))
parse_specifics2.c:				parser->nb_lines);
parse_specifics2.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_specifics2.c:	if (parser->parse_enum == e_parse_object &&
parse_specifics2.c:			!ft_strcmp("torus", parser->attribute))
parse_specifics2.c:				parser->nb_lines);
parse_specifics2.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_specifics2.c:	if (parser->parse_enum == e_parse_object &&
parse_specifics2.c:			!ft_strcmp("goursat", parser->attribute))
parse_specifics2.c:				parser->nb_lines);
parse_specifics2.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_specifics_cobject.c:	if (parser->parse_enum == e_parse_cobject && parser->attribute &&
parse_specifics_cobject.c:			!ft_strcmp("sphere_torus", parser->attribute))
parse_specifics_cobject.c:				parser->nb_lines);
parse_specifics_cobject.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_specifics_cobject.c:	if (parser->parse_enum == e_parse_cobject && parser->attribute &&
parse_specifics_cobject.c:			!ft_strcmp("sphere_torus", parser->attribute))
parse_specifics_cobject.c:				parser->nb_lines);
parse_specifics_cobject.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_specifics_cobject.c:	if (parser->parse_enum == e_parse_cobject && parser->attribute &&
parse_specifics_cobject.c:			!ft_strcmp("adn", parser->attribute))
parse_specifics_cobject.c:				parser->nb_lines);
parse_specifics_cobject.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_stack.c:	if (!parser->got_scene)
parse_stack.c:		if (!ft_strcmp("scene", parser->tag))
parse_stack.c:			parser->got_scene = 1;
parse_stack.c:	ft_lstadd(&(parser->tag_stack),
parse_stack.c:			ft_lstnew(parser->tag, sizeof(char) * ft_strlen(parser->tag) + 1));
parse_stack.c:	if (parser->op == POP)
parse_stack.c:		str = (char *)(ft_lstpop(&(parser->tag_stack)));
parse_stack.c:					parser->nb_lines, parser->tag);
parse_stack.c:		else if (ft_strcmp(parser->tag, str))
parse_stack.c:					parser->nb_lines, str, parser->tag);
parse_stack.c:	else if (parser->op == STACK)
parse_start.c:	if (parser->parse_enum != e_parse_cobject 
parse_start.c:				parser->nb_lines);
parse_start.c:	parser->parse_enum = e_parse_object;
parse_start.c:	if (parser->attribute == NULL)
parse_start.c:	if (parser->attribute != NULL)
parse_start.c:		if (!ft_strcmp(parser->attribute, "adn") ||
parse_start.c:			!ft_strcmp(parser->attribute, "sphere_torus") ||
parse_start.c:			!ft_strcmp(parser->attribute, "obj"))
parse_start.c:				parser->nb_lines, parser->attribute);
parse_start.c:		printf("parser->attribute: %s\n", parser->attribute);
parse_start.c:	parser->parse_enum = e_parse_cobject;
parse_start.c:	parser->parse_enum = e_parse_light;
parse_start.c:				parser->nb_lines, MAX_LIGHTS);
parse_start.c:	if (parser->attribute == NULL)
parse_start.c:	if (!ft_strcmp(parser->attribute, "point"))
parse_start.c:	else if (!ft_strcmp(parser->attribute, "spotlight"))
parse_start.c:	else if (!ft_strcmp(parser->attribute, "directional"))
parse_start.c:		ft_dprintf(2, "line %d: %s: unknown type of light\n", parser->nb_lines,
parse_start.c:				parser->attribute);
parse_start.c:	if (parser->parse_enum != e_parse_object)
parse_start.c:				parser->nb_lines);
parse_start.c:	parser->parse_enum = e_parse_cut;
parse_start.c:	if (parser->attribute == NULL)
parse_triangle.c:	if (parser->parse_enum == e_parse_object)
parse_triangle.c:				parser->nb_lines);
parse_triangle.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_triangle.c:	if (parser->parse_enum == e_parse_object)
parse_triangle.c:				parser->nb_lines);
parse_triangle.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
parse_triangle.c:	if (parser->parse_enum == e_parse_object)
parse_triangle.c:				parser->nb_lines);
parse_triangle.c:	parser->op = ft_parse_tag(&line, &(parser->tag), &(parser->attribute));
