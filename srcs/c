compute_matrix.c:	ptr = cobject->objlist;
compute_matrix.c:	//	t_mat4 pivot = ft_mat4_translate_vec(cobject->o);
compute_matrix.c:	//	t_mat4 pivot = ft_mat4_translate_vec(cobject->o);
compute_matrix.c:		t_mat4 rotate = ft_mat4_mult(ft_mat4_rotate_x(object->r.x), ft_mat4_mult(ft_mat4_rotate_y(object->r.y), ft_mat4_rotate_z(object->r.z)));
compute_matrix.c:		t_mat4 translate = ft_mat4_translate_vec(ft_point3d_add(cobject->o,  ft_point3d_mult(cobject->s, object->o)));
compute_matrix.c:				ft_new_vec3(object->s.x * cobject->s.x,
compute_matrix.c:					object->s.y * cobject->s.y, object->s.z * cobject->s.z));
compute_matrix.c:		t_mat4 rotate2 = ft_mat4_mult(ft_mat4_rotate_z(-object->r.z), ft_mat4_mult(ft_mat4_rotate_y(-object->r.y), ft_mat4_rotate_x(-object->r.x)));
compute_matrix.c:	//	transform = ft_mat4_mult(ft_mat4_rotate_vec(cobject->r), transform);
compute_matrix.c:	//	invtransform = ft_mat4_mult(invtransform, ft_mat4_mult(ft_mat4_rotate_z(-cobject->r.z), ft_mat4_mult(ft_mat4_rotate_y(-cobject->r.y), ft_mat4_rotate_x(-cobject->r.x))));
compute_matrix.c:		t_mat4 rotate_inv_cobj = ft_mat4_mult(ft_mat4_rotate_z(-cobject->r.z), ft_mat4_mult(ft_mat4_rotate_y(-cobject->r.y), ft_mat4_rotate_x(-cobject->r.x)));
compute_matrix.c:		t_mat4 rotate_cobj = ft_mat4_rotate_vec(cobject->r);
compute_matrix.c:		t_mat4 local_translate = ft_mat4_translate_vec(ft_point3d_mult(cobject->s, object->o));
compute_matrix.c:		object->transform_pos = transform;
compute_matrix.c:		object->transform_dir = transform_dir;
compute_matrix.c:		object->transform_pos_inv = invtransform;
compute_matrix.c:		object->transform_dir_inv = transform_dir_inv;
debug.c:		print_list(lst->cobject->objlist);
obj_list.c:		del_list(&(aux->cobject->objlist));
parse_orsc.c:		pos = &(world->cobjlist->cobject->objlist->object->o);
parse_orsc.c:		pos = &(world->cobjlist->cobject->o);
parse_orsc.c:		rot = &(world->cobjlist->cobject->objlist->object->r);
parse_orsc.c:		rot = &(world->cobjlist->cobject->r);
parse_orsc.c:		scale = &(world->cobjlist->cobject->objlist->object->s);
parse_orsc.c:		scale = &(world->cobjlist->cobject->s);
parse_orsc.c:		color = &(world->cobjlist->cobject->objlist->object->c);
parse_orsc.c:		color = &(world->cobjlist->cobject->c);
parse_orsc.c:		pert = &(world->cobjlist->cobject->objlist->object->pert);
parse_orsc.c:		pert = &(world->cobjlist->cobject->pert);
parse_others.c:		refraction = &(world->cobjlist->cobject->objlist->object->refract);
parse_others.c:		refraction = &(world->cobjlist->cobject->refract);
parse_others.c:		reflection = &(world->cobjlist->cobject->objlist->object->reflect);
parse_others.c:		reflection = &(world->cobjlist->cobject->reflect);
parse_others.c:		transparency = &(world->cobjlist->cobject->objlist->object->transp);
parse_others.c:		transparency = &(world->cobjlist->cobject->transp);
parse_others.c:		shine = &(world->cobjlist->cobject->objlist->object->shine);
parse_others.c:		shine = &(world->cobjlist->cobject->shine);
parse_specifics.c:	if (object->intersect_func == intersect_sphere)
parse_specifics.c:		object->object_union.sphere.radius = 1;
parse_specifics.c:	else if (object->intersect_func == intersect_cylinder)
parse_specifics.c:		object->object_union.cylinder.radius = 1;
parse_specifics.c:	else if (object->intersect_func == intersect_cone)
parse_specifics.c:		object->object_union.cone.angle = M_PI / 4;
parse_specifics.c:	else if (object->intersect_func == intersect_ellipsoid)
parse_specifics.c:		object->object_union.ellipsoid.abc = ft_new_vec3(1, 1.2, 0.7);
parse_specifics.c:		object->object_union.ellipsoid.radius = 1;
parse_specifics.c:	else if (object->intersect_func == intersect_torus)
parse_specifics.c:		object->object_union.torus.big_rad = 2;
parse_specifics.c:		object->object_union.torus.small_rad = 1;
parse_specifics.c:	else if (object->intersect_func == intersect_goursat)
parse_specifics.c:		object->object_union.goursat.a = 5;
parse_specifics.c:		object->object_union.goursat.b = 11.8;
parse_specifics.c:		object->intersect_func = intersect_sphere;
parse_specifics.c:		object->intersect_func = intersect_cone;
parse_specifics.c:		object->intersect_func = intersect_cylinder;
parse_specifics.c:		object->intersect_func = intersect_plane;
parse_specifics.c:		object->intersect_func = intersect_ellipsoid;
parse_specifics.c:		object->intersect_func = intersect_torus;
parse_specifics.c:		object->intersect_func = intersect_goursat;
parse_specifics.c:		object->intersect_func = intersect_lemniscate;
parse_specifics.c:		object->intersect_func = intersect_roman;
parse_specifics.c:		object->intersect_func = intersect_piriform;
parse_specifics.c:		angle = &(world->cobjlist->cobject->objlist->object\
parse_specifics.c:		radius = &(world->cobjlist->cobject->objlist->object\
parse_specifics.c:		radius = &(world->cobjlist->cobject->objlist->object\
parse_specifics.c:		radius = &(world->cobjlist->cobject->objlist->object\
parse_specifics2.c:		neg = &(world->cobjlist->cobject->objlist->object->negative);
parse_specifics2.c:		neg = &(world->cobjlist->cobject->negative);
parse_specifics2.c:		abc = &(world->cobjlist->cobject->objlist->object\
parse_specifics2.c:		big_rad = &(world->cobjlist->cobject->objlist->object\
parse_specifics2.c:		small_rad = &(world->cobjlist->cobject->objlist->object\
parse_specifics2.c:		a = &(world->cobjlist->cobject->objlist->object\
parse_specifics2.c:		b = &(world->cobjlist->cobject->objlist->object\
parse_start.c:	add_obj(&(world->cobjlist->cobject->objlist), object);
parse_tools.c:	cobject->objlist = NULL;
parse_tools.c:	cobject->o = ft_new_vec3(0, 0, 0);
parse_tools.c:	cobject->r = ft_new_vec3(0, 0, 0);
parse_tools.c:	cobject->s = ft_new_vec3(1, 1, 1);
parse_tools.c:	cobject->c = get_color(0xFFFFFF);
parse_tools.c:	cobject->pert = e_none;
parse_tools.c:	cobject->transp = 0;
parse_tools.c:	cobject->refract = 0;
parse_tools.c:	cobject->reflect = 0;
parse_tools.c:	cobject->shine = 30;
parse_tools.c:	cobject->objlist = NULL;
parse_tools.c:	cobject->negative = 0;
parse_tools.c:	object->o = ft_new_vec3(0, 0, 0);
parse_tools.c:	object->r = ft_new_vec3(0, 0, 0);
parse_tools.c:	object->s = ft_new_vec3(1, 1, 1);
parse_tools.c:	object->c = get_color(cobject.c.col);
parse_tools.c:	object->transp = cobject.transp;
parse_tools.c:	object->pert = cobject.pert;
parse_tools.c:	object->refract = cobject.refract;
parse_tools.c:	object->reflect = cobject.reflect;
parse_tools.c:	object->shine = cobject.shine;
parse_tools.c:	object->negative = 0;
process.c:		e->selected_cobject->s.x += e->cam->speed;
process.c:		e->selected_cobject->s.y += e->cam->speed;
process.c:		e->selected_cobject->s.z += e->cam->speed;
process.c:		e->selected_cobject->s.x -= e->cam->speed;
process.c:		e->selected_cobject->s.y -= e->cam->speed;
process.c:		e->selected_cobject->s.z -= e->cam->speed;
process.c:		e->selected_cobject->o.y += e->cam->speed;
process.c:		e->selected_cobject->o.y -= e->cam->speed;
process.c:		e->selected_cobject->o.x += e->cam->speed;
process.c:		e->selected_cobject->o.x -= e->cam->speed;
process.c:		e->selected_cobject->o.z += e->cam->speed;
process.c:		e->selected_cobject->o.z -= e->cam->speed;
process.c:		e->selected_cobject->r.x += M_PI / 16;
process.c:		e->selected_cobject->r.x -= M_PI / 16;
process.c:		e->selected_cobject->r.y += M_PI / 16;
process.c:		e->selected_cobject->r.y -= M_PI / 16;
process.c:		e->selected_cobject->r.z += M_PI / 16;
process.c:		e->selected_cobject->r.z -= M_PI / 16;
